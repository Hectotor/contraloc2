import 'dart:io';
import 'package:mailer/mailer.dart';
import 'package:mailer/smtp_server.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';

class ContractEmailService {
  static Future<void> sendEmailWithPdf({
    required String pdfPath,
    required String email,
    required String marque,
    required String modele,
    required String immatriculation,
    required BuildContext context,
    String? prenom,
    String? nom,
    String? nomEntreprise,
    String? adresse,
    String? telephone,
    String? logoUrl,
    bool sendCopyToAdmin = true,
    String? nomCollaborateur,
    String? prenomCollaborateur,
  }) async {
    try {
      // R√©cup√©rer les donn√©es de l'utilisateur
      final user = FirebaseAuth.instance.currentUser;
      if (user == null) {
        throw Exception('Utilisateur non connect√©');
      }
      
      // V√©rifier si l'utilisateur est un collaborateur
      String? adminEmail;
      
      try {
        final userDoc = await FirebaseFirestore.instance
            .collection('users')
            .doc(user.uid)
            .get();
        
        if (userDoc.exists && userDoc.data()?['role'] == 'collaborateur') {
          final adminId = userDoc.data()?['adminId'];
          if (adminId != null) {
            print('üë• Collaborateur d√©tect√©, utilisation des donn√©es de l\'administrateur: $adminId');
            
            // R√©cup√©rer les donn√©es de l'entreprise depuis l'admin
            final adminDoc = await FirebaseFirestore.instance
                .collection('users')
                .doc(adminId)
                .get();
            
            if (adminDoc.exists) {
              nomEntreprise ??= adminDoc.data()?['nomEntreprise'];
              adresse ??= adminDoc.data()?['adresse'];
              telephone ??= adminDoc.data()?['telephone'];
              logoUrl ??= adminDoc.data()?['logoUrl'];
            }
            
            // R√©cup√©rer l'email de l'administrateur
            if (sendCopyToAdmin) {
              try {
                // D'abord essayer de r√©cup√©rer depuis le document principal de l'admin
                final adminUserDoc = await FirebaseFirestore.instance
                    .collection('users')
                    .doc(adminId)
                    .get();
                
                // V√©rifier si l'email est dans le document principal
                adminEmail = adminUserDoc.data()?['email'];
                
                // Si l'email n'est pas trouv√©, essayer dans la sous-collection authentification
                if (adminEmail == null) {
                  final adminAuthDoc = await FirebaseFirestore.instance
                      .collection('users')
                      .doc(adminId)
                      .collection('authentification')
                      .doc(adminId)
                      .get();
                  
                  adminEmail = adminAuthDoc.data()?['email'];
                  print('üìß Email administrateur r√©cup√©r√© depuis authentification: $adminEmail');
                }
                
                // Si toujours null, essayer de r√©cup√©rer l'utilisateur Firebase
                if (adminEmail == null) {
                  try {
                    // R√©cup√©rer tous les collaborateurs de l'admin pour trouver son email
                    final adminCollaborateursSnapshot = await FirebaseFirestore.instance
                        .collection('users')
                        .doc(adminId)
                        .collection('collaborateurs')
                        .where('role', isEqualTo: 'admin')
                        .limit(1)
                        .get();
                    
                    if (adminCollaborateursSnapshot.docs.isNotEmpty) {
                      adminEmail = adminCollaborateursSnapshot.docs.first.data()['email'];
                      print('üìß Email administrateur r√©cup√©r√© depuis collaborateurs: $adminEmail');
                    }
                  } catch (e) {
                    print('‚ùå Erreur lors de la recherche dans collaborateurs: $e');
                  }
                }
                
                print('üìß Email administrateur r√©cup√©r√©: $adminEmail');
              } catch (e) {
                print('‚ùå Erreur lors de la r√©cup√©ration de l\'email administrateur: $e');
              }
            }
          }
        } else {
          // Si c'est l'admin lui-m√™me, utiliser ses propres donn√©es
          if (sendCopyToAdmin) {
            adminEmail = userDoc.data()?['email'] ?? user.email;
            print('üìß Email administrateur (utilisateur actuel): $adminEmail');
            
            // Si toujours null, utiliser l'email de l'utilisateur Firebase
            if (adminEmail == null && user.email != null) {
              adminEmail = user.email;
              print('üìß Utilisation de l\'email Firebase comme fallback: $adminEmail');
            }
          }
          
          // R√©cup√©rer les donn√©es de l'entreprise
          nomEntreprise ??= userDoc.data()?['nomEntreprise'];
          adresse ??= userDoc.data()?['adresse'];
          telephone ??= userDoc.data()?['telephone'];
          logoUrl ??= userDoc.data()?['logoUrl'];
        }
      } catch (e) {
        print('‚ùå Erreur lors de la v√©rification du r√¥le: $e');
        // Tenter d'utiliser les donn√©es de l'utilisateur actuel comme fallback
        if (sendCopyToAdmin && user.email != null) {
          adminEmail = user.email;
          print('üìß Utilisation de l\'email Firebase comme fallback apr√®s erreur: $adminEmail');
        }
      }

      // R√©cup√©rer les param√®tres SMTP depuis admin/smtpSettings
      DocumentSnapshot? adminDoc;
      int maxRetries = 5;
      int currentRetry = 0;
      int baseDelayMs = 500;

      while (currentRetry < maxRetries) {
        try {
          // Tenter de r√©cup√©rer les param√®tres SMTP
          adminDoc = await FirebaseFirestore.instance
              .collection('admin')
              .doc('smtpSettings')
              .get();
          
          // Si on arrive ici, la r√©cup√©ration a r√©ussi
          break;
        } catch (e) {
          currentRetry++;
          if (currentRetry >= maxRetries) {
            print('‚ùå Erreur r√©cup√©ration param√®tres SMTP apr√®s $maxRetries tentatives: $e');
            throw Exception('Configuration SMTP non accessible: $e');
          }
          
          // Calcul du d√©lai avec backoff exponentiel
          int delayMs = baseDelayMs * (1 << (currentRetry - 1));
          
          print('üîÑ Tentative $currentRetry/$maxRetries √©chou√©e. Nouvel essai dans ${delayMs}ms...');
          await Future.delayed(Duration(milliseconds: delayMs));
        }
      }

      if (adminDoc == null || !adminDoc.exists) {
        throw Exception('Configuration SMTP non trouv√©e');
      }

      final smtpData = adminDoc.data() as Map<String, dynamic>;
      final smtpEmail = smtpData['smtpEmail'] ?? '';
      final smtpPassword = smtpData['smtpPassword'] ?? '';
      final smtpServer = smtpData['smtpServer'] ?? '';
      final smtpPort = smtpData['smtpPort'] ?? 465;

      if (smtpEmail.isEmpty || smtpPassword.isEmpty || smtpServer.isEmpty) {
        throw Exception('Configuration SMTP incompl√®te');
      }

      // V√©rifier que le fichier PDF existe
      if (!File(pdfPath).existsSync()) {
        throw Exception('Le fichier PDF est introuvable');
      }

      final server = SmtpServer(
        smtpServer,
        port: smtpPort,
        username: smtpEmail,
        password: smtpPassword,
        ssl: true,
      );

      print('Tentative d\'envoi depuis $smtpEmail via $smtpServer:$smtpPort');
      final message = Message()
        ..from = Address(smtpEmail, nomEntreprise ?? 'Contraloc')
        ..recipients.add(email)
        ..subject = 'üöó Votre contrat de location $marque $modele $immatriculation'
        ..headers = {
          'Message-ID':
              '<${DateTime.now().millisecondsSinceEpoch}@contraloc.fr>',
          'X-Mailer': 'Contraloc Mailer',
          'Return-Path': '<$smtpEmail>',
          'List-Unsubscribe': '<mailto:$smtpEmail>',
          'Feedback-ID': 'contraloc:${DateTime.now().millisecondsSinceEpoch}'
        }
        ..html = '''
          <div style="font-family: Arial, sans-serif; font-size: 14px; color: #333; line-height: 1.6;">
            <div style="background-color: #08004D; color: white; padding: 20px; text-align: center; border-radius: 10px 10px 0 0;">
              <h1 style="margin: 0; font-size: 24px; color: #FFFFFF;">${nomEntreprise ?? "Contraloc"}</h1>
            </div>

            <div style="padding: 20px; background-color: #EFEFEF; border-radius: 0 0 10px 10px;">
              <p>Bonjour ${prenom ?? ''} ${nom ?? ''},</p>
              
              <p>Nous avons le plaisir de vous transmettre votre contrat de location sign√© en pi√®ce jointe. üìù</p>
              
              <p style="font-weight: bold;">Merci pour votre confiance et bonne route ! üèéÔ∏èüöó</p>

              <p style="font-weight: bold; color: #333;">
                <strong>‚ö†Ô∏è L'utilisateur est totalement responsable des contraventions, amendes et proc√®s-verbaux √©tablis en violation du code de la route.</strong>
              </p>

              <p>Si vous pensez avoir re√ßu cet email par erreur merci de bien vouloir nous contacter au plus vite √† l'adresse suivante : contact@contraloc.fr.</p>

              <p>√Ä bient√¥t,</p>

              <br>
              <div style="display: flex; align-items: center;">
                ${logoUrl != null ? '<img src="$logoUrl" alt="Logo" style="width: 70px; height: auto; margin-right: 15px;" />' : ''}
                <div>
                  <p style="margin: 0; font-weight: bold; font-size: 16px; color: #08004D;">${nomEntreprise ?? "Contraloc"}</p>
                  ${adresse != null ? '<p style="margin: 0; color #555;">Adresse: $adresse</p>' : ''}
                  ${telephone != null ? '<p style="margin: 0; color: #555;">T√©l√©phone : $telephone</p>' : ''}
                </div>
              </div>
              <p style="text-align: center; font-size: 12px; color: #777; margin-top: 20px;">contraloc.fr</p>
            </div>
          </div>
        '''
        ..attachments.add(FileAttachment(File(pdfPath)));

      final sendReport = await send(message, server);
      print('Rapport d\'envoi : ${sendReport.toString()}');

      // Envoyer une copie √† l'administrateur si demand√© et si l'email est disponible
      if (sendCopyToAdmin && adminEmail != null && adminEmail != email) {
        print('üì® Tentative d\'envoi d\'une copie √† l\'administrateur: $adminEmail');
        try {
          // R√©cup√©rer l'ID de l'administrateur
          String adminId = user.uid;
          
          // Si c'est un collaborateur, r√©cup√©rer l'ID de son admin
          final userDoc = await FirebaseFirestore.instance
              .collection('users')
              .doc(user.uid)
              .get();
              
          if (userDoc.exists && userDoc.data()?['role'] == 'collaborateur') {
            adminId = userDoc.data()?['adminId'] ?? user.uid;
          }
          
          // R√©cup√©rer email_secondaire depuis la sous-collection authentification
          String? emailSecondaire;
          try {
            final adminAuthDoc = await FirebaseFirestore.instance
                .collection('users')
                .doc(adminId)
                .collection('authentification')
                .doc(adminId)
                .get();
                
            if (adminAuthDoc.exists) {
              emailSecondaire = adminAuthDoc.data()?['email_secondaire'];
              if (emailSecondaire != null && emailSecondaire.isNotEmpty) {
                print('üìß Email secondaire administrateur r√©cup√©r√©: $emailSecondaire');
              }
            }
          } catch (e) {
            print('‚ùå Erreur lors de la r√©cup√©ration de l\'email secondaire: $e');
          }
          
          // R√©cup√©rer tous les collaborateurs qui ont receiveContractCopies = true
          List<String> collaborateursEmails = [];
          try {
            // R√©cup√©rer directement depuis la collection users principale
            final collaborateursSnapshot = await FirebaseFirestore.instance
                .collection('users')
                .where('adminId', isEqualTo: adminId)
                .where('role', isEqualTo: 'collaborateur')
                .where('receiveContractCopies', isEqualTo: true)
                .get();
            
            for (var collaborateurDoc in collaborateursSnapshot.docs) {
              // Ne pas ajouter l'utilisateur actuel s'il est un collaborateur
              if (collaborateurDoc.id == user.uid) continue;
              
              final collaborateurEmail = collaborateurDoc.data()['email'];
              if (collaborateurEmail != null && collaborateurEmail.isNotEmpty) {
                collaborateursEmails.add(collaborateurEmail);
                print('üìß Collaborateur ajout√© en copie: $collaborateurEmail');
              }
            }
          } catch (e) {
            print('‚ùå Erreur lors de la r√©cup√©ration des collaborateurs: $e');
            print('‚ÑπÔ∏è L\'email sera envoy√© sans les collaborateurs en copie');
          }
          
          // D√©terminer si le contrat a √©t√© cr√©√© par un collaborateur
          String collaborateurInfo = '';
          if (nomCollaborateur != null && prenomCollaborateur != null) {
            collaborateurInfo = '<p><strong>Ce contrat a √©t√© cr√©√© par votre collaborateur: $prenomCollaborateur $nomCollaborateur</strong></p>';
          }
          
          final adminMessage = Message()
            ..from = Address(smtpEmail, nomEntreprise ?? 'Contraloc')
            ..recipients.add(smtpEmail); // Utiliser l'adresse d'envoi comme destinataire technique

          // Ajouter l'administrateur en copie invisible (cci)
          adminMessage.bccRecipients.add(adminEmail);
          print('üìß Administrateur ajout√© en copie invisible: $adminEmail');
                      
          // Ajouter l'email secondaire en copie invisible (cci) si disponible
          if (emailSecondaire != null && emailSecondaire.isNotEmpty) {
            adminMessage.bccRecipients.add(emailSecondaire);
            print('üìß Email secondaire ajout√© en copie invisible: $emailSecondaire');
          }
          
          // Ajouter les collaborateurs en copie invisible (cci)
          for (var collaborateurEmail in collaborateursEmails) {
            adminMessage.bccRecipients.add(collaborateurEmail);
            print('üìß Collaborateur ajout√© en copie invisible: $collaborateurEmail');
          }
          
          adminMessage
            ..subject = '[COPIE] Contrat de location $marque $modele $immatriculation pour $prenom $nom'
            ..headers = {
              'Message-ID':
                  '<${DateTime.now().millisecondsSinceEpoch + 1}@contraloc.fr>',
              'X-Mailer': 'Contraloc Mailer',
              'Return-Path': '<$smtpEmail>',
              'List-Unsubscribe': '<mailto:$smtpEmail>',
              'Feedback-ID': 'contraloc:${DateTime.now().millisecondsSinceEpoch + 1}'
            }
            ..html = '''
              <div style="font-family: Arial, sans-serif; font-size: 14px; color: #333; line-height: 1.6;">
                <div style="background-color: #08004D; color: white; padding: 20px; text-align: center; border-radius: 10px 10px 0 0;">
                  <h1 style="margin: 0; font-size: 24px; color: #FFFFFF;">${nomEntreprise ?? "Contraloc"} - Copie de contrat</h1>
                </div>

                <div style="padding: 20px; background-color: #EFEFEF; border-radius: 0 0 10px 10px;">
                  <p>Bonjour,</p>
                  
                  <p>Voici une copie du contrat de location qui a √©t√© envoy√© √† <strong>$prenom $nom</strong> pour le v√©hicule <strong>$marque $modele $immatriculation</strong>. üìù</p>
                  
                  $collaborateurInfo
                  
                  <p>Ce message est une copie automatique envoy√©e √† l'administrateur pour archivage.</p>

                  <br>
                  <div style="display: flex; align-items: center;">
                    ${logoUrl != null ? '<img src="$logoUrl" alt="Logo" style="width: 70px; height: auto; margin-right: 15px;" />' : ''}
                    <div>
                      <p style="margin: 0; font-weight: bold; font-size: 16px; color: #08004D;">${nomEntreprise ?? "Contraloc"}</p>
                      ${adresse != null ? '<p style="margin: 0; color #555;">Adresse: $adresse</p>' : ''}
                      ${telephone != null ? '<p style="margin: 0; color: #555;">T√©l√©phone : $telephone</p>' : ''}
                    </div>
                  </div>
                  <p style="text-align: center; font-size: 12px; color: #777; margin-top: 20px;">contraloc.fr</p>
                </div>
              </div>
            '''
            ..attachments.add(FileAttachment(File(pdfPath)));

          await send(adminMessage, server);
          print('Copie du contrat envoy√©e √† l\'administrateur: $adminEmail');
        } catch (e) {
          print('Erreur lors de l\'envoi de la copie √† l\'administrateur: $e');
          // Ne pas bloquer le processus si l'envoi de la copie √©choue
        }
      }

      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Contrat envoy√© par email avec succ√®s')),
        );
      }
    } on SocketException catch (e) {
      print('Erreur r√©seau : $e');
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Probl√®me de connexion r√©seau')),
        );
      }
    } catch (e) {
      print('Erreur inconnue : $e');
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Erreur lors de l\'envoi de l\'email : $e')),
        );
      }
    }
  }
}
