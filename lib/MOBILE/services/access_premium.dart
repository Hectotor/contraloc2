import 'package:cloud_firestore/cloud_firestore.dart';
import '../services/auth_util.dart';

class AccessPremium {
  /// V√©rifie si l'utilisateur (ou son administrateur) a un abonnement premium
  static Future<bool> isPremiumUser() async {
    try {
      print('üîÑ V√©rification du statut premium');
      
      // Utiliser AuthUtil pour obtenir les informations d'authentification
      final authData = await AuthUtil.getAuthData();
      if (authData.isEmpty) {
        print('‚ùå Aucun utilisateur connect√©');
        return false;
      }

      final targetId = authData['adminId'] as String;
      print('‚úÖ ID cible: $targetId');

      try {
        final userDocRef = FirebaseFirestore.instance.collection('users').doc(targetId);
        final userDoc = await userDocRef.get(const GetOptions(source: Source.server));
        
        final userData = userDoc.data();
        if (userData == null) {
          // Essayer d'acc√©der directement aux donn√©es d'authentification comme admin
          print('üëÄ Essai d\'acc√®s direct aux donn√©es d\'authentification comme administrateur');
          final authDocRef = await AuthUtil.getAuthDocRef(targetId);
          
          final authDoc = await authDocRef.get(const GetOptions(source: Source.server));
          return _checkPremiumStatus(authDoc.data() as Map<String, dynamic>?);
        }
        
        // V√©rifier si c'est un collaborateur
        if (userData['role'] == 'collaborateur') {
          final adminId = userData['adminId'] as String?;
          if (adminId == null) {
            print('‚ùå AdminId non trouv√© pour le collaborateur');
            return false;
          }
          
          print('üë• Collaborateur d√©tect√© - V√©rification du statut premium de l\'admin: $adminId');
          
          // V√©rifier l'authentification de l'administrateur
          final adminAuthDocRef = await AuthUtil.getAuthDocRef(adminId);
          
          // Utiliser Source.server pour √©viter les probl√®mes de cache
          final adminAuthDoc = await adminAuthDocRef.get(const GetOptions(source: Source.server));
          return _checkPremiumStatus(adminAuthDoc.data() as Map<String, dynamic>?);
        } else {
          // C'est un administrateur, v√©rifier directement son statut premium
          print('üë¥ Administrateur d√©tect√©, v√©rification directe du statut premium');
          final authDocRef = await AuthUtil.getAuthDocRef(targetId);
          
          final authDoc = await authDocRef.get(const GetOptions(source: Source.server));
          return _checkPremiumStatus(authDoc.data() as Map<String, dynamic>?);
        }
      } catch (e) {
        print('‚ùå Erreur pendant la r√©cup√©ration des donn√©es utilisateur: $e');
        return false;
      }
    } catch (e) {
      print('‚ùå Erreur globale lors de la v√©rification du statut premium: $e');
      return false;
    }
  }
  
  /// V√©rifie le statut premium √† partir des donn√©es d'authentification
  static bool _checkPremiumStatus(Map<String, dynamic>? authData) {
    if (authData == null) {
      print('‚ùå Donn√©es auth null');
      return false;
    }

    // V√©rifier tous les champs possibles pour premium et platinum
    final subscriptionId = authData['subscriptionId'] ?? 'free';
    final cbSubscription = authData['cb_subscription'] ?? 'free';
    final stripePlanType = authData['stripePlanType'] ?? 'free';
    
    print('üìä Valeurs d\'abonnement trouv√©es: subscriptionId=$subscriptionId, cbSubscription=$cbSubscription, stripePlanType=$stripePlanType');
    
    bool isPremium = false;
    String? reason;
    
    if (subscriptionId.toString().contains('premium') || subscriptionId.toString().contains('platinum')) {
      isPremium = true;
      reason = '‚úÖ Statut premium trouv√© dans subscriptionId: $subscriptionId';
    } else if (cbSubscription.toString().contains('premium') || cbSubscription.toString().contains('platinum')) {
      isPremium = true;
      reason = '‚úÖ Statut premium trouv√© dans cb_subscription: $cbSubscription';
    } else if (stripePlanType.toString().contains('premium') || stripePlanType.toString().contains('platinum')) {
      isPremium = true;
      reason = '‚úÖ Statut premium trouv√© dans stripePlanType: $stripePlanType';
    } else {
      reason = '‚ùå Aucun statut premium trouv√©';
    }
    
    print(reason);
    print('flutter: _isPremiumUser d√©fini √†: $isPremium');
    return isPremium;
  }
}
