import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:contraloc/main_mobile.dart'; // Import pour acc√©der √† navigatorKey
import 'package:contraloc/MOBILE/widget/MES%20CONTRATS/vehicle_access_manager.dart';
import 'package:contraloc/MOBILE/screens/login.dart';

class PopupDeconnexion {
  static Future<void> showLogoutConfirmationDialog(BuildContext context) async {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: Colors.white,
        title: const Text(
          "Confirmation de d√©connexion",
          style: TextStyle(
            fontSize: 22,
            fontWeight: FontWeight.bold,
            color: Color(0xFF08004D),
          ),
        ),
        content: const Text(
          "√ätes-vous s√ªr de vouloir vous d√©connecter ?",
          style: TextStyle(
            fontSize: 18,
            color: Colors.black87,
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text(
              "Annuler",
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: Color(0xFF08004D),
              ),
            ),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.of(context).pop();
              _logout(context);
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.red,
              padding: const EdgeInsets.symmetric(vertical: 15),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(10),
              ),
            ),
            child: const Text(
              "Se d√©connecter",
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: Colors.white,
              ),
            ),
          ),
        ],
      ),
    );
  }

  // M√©thode pour d√©connecter l'utilisateur compl√®tement
  static Future<void> _logout(BuildContext context) async {
    try {
      // Disposer de tous les gestionnaires qui pourraient causer des erreurs de permission
      // IMPORTANT: Nettoyer les streams AVANT de naviguer ou de d√©connecter
      print('üîÑ Nettoyage des gestionnaires avant d√©connexion');
      VehicleAccessManager.instance.dispose();
      
      // Navigation imm√©diate vers la page de connexion pour √©viter les erreurs de permission
      // dues aux streams actifs
      navigatorKey.currentState?.pushAndRemoveUntil(
        MaterialPageRoute(builder: (context) => const LoginPage()),
        (route) => false, // Supprime toutes les routes pr√©c√©dentes
      );
      
      // Attendre un court instant pour que l'√©cran de login soit affich√©
      await Future.delayed(const Duration(milliseconds: 100));
      
      // D√©connecter Firebase Auth apr√®s la navigation pour √©viter les erreurs de permission
      await FirebaseAuth.instance.signOut();
      
      // Effacer les pr√©f√©rences partag√©es
      final prefs = await SharedPreferences.getInstance();
      await prefs.clear();
      
      print('üëã D√©connexion compl√®te effectu√©e avec succ√®s');
    } catch (e) {
      print('‚Üí Erreur lors de la d√©connexion: $e');
      // M√™me en cas d'erreur, s'assurer que l'utilisateur est redirig√© vers login
      if (navigatorKey.currentState?.context != null) {
        navigatorKey.currentState?.pushAndRemoveUntil(
          MaterialPageRoute(builder: (context) => const LoginPage()),
          (route) => false,
        );
      }
    }
  }
}