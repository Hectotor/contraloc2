import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';

class VehicleAccessManager {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseAuth _auth = FirebaseAuth.instance;
  
  // Variable pour stocker l'ID de l'utilisateur dont on doit acc√©der aux v√©hicules
  // (soit l'ID de l'utilisateur actuel, soit l'ID de l'admin associ√©)
  String? _targetUserId;
  bool _isInitialized = false;
  
  // Map pour stocker les timestamps de derni√®re mise √† jour des v√©hicules
  final Map<String, DateTime> _lastVehicleUpdate = {};
  // Dur√©e apr√®s laquelle on consid√®re que les donn√©es du cache sont obsol√®tes (5 minutes par d√©faut)
  final Duration _cacheValidityDuration = Duration(minutes: 5);
  
  // M√©thode pour initialiser le gestionnaire
  Future<void> initialize() async {
    if (_isInitialized) return;
    
    final user = _auth.currentUser;
    if (user == null) {
      _isInitialized = true;
      return;
    }
    
    try {
      // V√©rifier si l'utilisateur est un collaborateur
      final userDoc = await _firestore.collection('users').doc(user.uid).get();
      
      if (userDoc.exists && userDoc.data()?['role'] == 'collaborateur') {
        // C'est un collaborateur, r√©cup√©rer l'ID de l'admin
        print('üë• Collaborateur d√©tect√© pour acc√®s v√©hicules');
        
        final adminId = userDoc.data()?['adminId'];
        if (adminId != null) {
          print('üë• Utilisation des v√©hicules de l\'administrateur: $adminId');
          _targetUserId = adminId;
        } else {
          print('‚ö†Ô∏è Collaborateur sans adminId, utilisation de son propre ID');
          _targetUserId = user.uid;
        }
      } else {
        // C'est un administrateur, utiliser son propre ID
        print('üë§ Administrateur d√©tect√©, utilisation de son propre ID');
        _targetUserId = user.uid;
      }
      
      _isInitialized = true;
    } catch (e) {
      print('‚ùå Erreur initialisation acc√®s v√©hicules: $e');
      // En cas d'erreur, utiliser l'ID de l'utilisateur actuel par d√©faut
      _targetUserId = user.uid;
      _isInitialized = true;
    }
  }
  
  // M√©thode pour obtenir le stream des v√©hicules
  Stream<QuerySnapshot> getVehiclesStream() {
    if (_targetUserId == null) {
      // Si pas encore initialis√© ou erreur, utiliser l'ID de l'utilisateur actuel
      final currentUserId = _auth.currentUser?.uid;
      return _firestore
          .collection('users')
          .doc(currentUserId)
          .collection('vehicules')
          .snapshots();
    }
    
    // Utiliser l'ID cible (admin ou utilisateur actuel)
    return _firestore
        .collection('users')
        .doc(_targetUserId)
        .collection('vehicules')
        .snapshots();
  }
  
  // M√©thode pour r√©cup√©rer un document de v√©hicule sp√©cifique
  // Utilise le cache en priorit√© pour r√©duire les co√ªts Firebase
  Future<DocumentSnapshot> getVehicleDocument(String vehicleId) async {
    // S'assurer que le gestionnaire est initialis√©
    if (!_isInitialized) {
      await initialize();
    }
    
    final String effectiveUserId = _targetUserId ?? _auth.currentUser?.uid ?? '';
    if (effectiveUserId.isEmpty) {
      throw Exception('Aucun utilisateur connect√©');
    }
    
    final docRef = _firestore
        .collection('users')
        .doc(effectiveUserId)
        .collection('vehicules')
        .doc(vehicleId);
    
    // V√©rifier si nous devons forcer une mise √† jour depuis le serveur
    final bool shouldRefreshFromServer = _shouldRefreshVehicleData(vehicleId);
    
    try {
      // D'abord essayer de r√©cup√©rer depuis le cache
      final DocumentSnapshot docSnapshot = await docRef.get(GetOptions(source: Source.cache));
      
      // Si les donn√©es sont dans le cache et ne n√©cessitent pas de mise √† jour, les retourner
      if (docSnapshot.exists && !shouldRefreshFromServer) {
        print('üìã V√©hicule $vehicleId r√©cup√©r√© depuis le cache');
        return docSnapshot;
      }
      
      // Si les donn√©es ne sont pas dans le cache ou n√©cessitent une mise √† jour, 
      // les r√©cup√©rer depuis le serveur
      final DocumentSnapshot serverSnapshot = await docRef.get(GetOptions(source: Source.server));
      
      // Mettre √† jour le timestamp de derni√®re mise √† jour
      _lastVehicleUpdate[vehicleId] = DateTime.now();
      
      print('üîÑ V√©hicule $vehicleId mis √† jour depuis le serveur');
      return serverSnapshot;
    } catch (e) {
      // En cas d'erreur (ex: hors ligne), essayer de r√©cup√©rer depuis le cache
      try {
        print('‚ö†Ô∏è Erreur serveur, tentative de r√©cup√©ration depuis le cache: $e');
        return await docRef.get(GetOptions(source: Source.cache));
      } catch (cacheError) {
        print('‚ùå Erreur cache: $cacheError');
        rethrow;
      }
    }
  }
  
  // M√©thode pour forcer la mise √† jour d'un v√©hicule depuis le serveur
  Future<DocumentSnapshot> refreshVehicleFromServer(String vehicleId) async {
    if (!_isInitialized) {
      await initialize();
    }
    
    final String effectiveUserId = _targetUserId ?? _auth.currentUser?.uid ?? '';
    if (effectiveUserId.isEmpty) {
      throw Exception('Aucun utilisateur connect√©');
    }
    
    final docRef = _firestore
        .collection('users')
        .doc(effectiveUserId)
        .collection('vehicules')
        .doc(vehicleId);
    
    final serverSnapshot = await docRef.get(GetOptions(source: Source.server));
    _lastVehicleUpdate[vehicleId] = DateTime.now();
    
    print('üîÑ V√©hicule $vehicleId forc√© depuis le serveur');
    return serverSnapshot;
  }
  
  // M√©thode priv√©e pour d√©terminer si les donn√©es du v√©hicule doivent √™tre mises √† jour
  bool _shouldRefreshVehicleData(String vehicleId) {
    final lastUpdate = _lastVehicleUpdate[vehicleId];
    if (lastUpdate == null) {
      return true; // Premi√®re fois, mise √† jour n√©cessaire
    }
    
    final now = DateTime.now();
    final difference = now.difference(lastUpdate);
    
    // Mettre √† jour si les donn√©es sont plus anciennes que la dur√©e de validit√© du cache
    return difference > _cacheValidityDuration;
  }
  
  // M√©thode pour r√©cup√©rer un v√©hicule par immatriculation
  Future<QuerySnapshot> getVehicleByImmatriculation(String immatriculation) async {
    // S'assurer que le gestionnaire est initialis√©
    if (!_isInitialized) {
      await initialize();
    }
    
    final String effectiveUserId = _targetUserId ?? _auth.currentUser?.uid ?? '';
    if (effectiveUserId.isEmpty) {
      throw Exception('Aucun utilisateur connect√©');
    }
    
    final query = _firestore
        .collection('users')
        .doc(effectiveUserId)
        .collection('vehicules')
        .where('immatriculation', isEqualTo: immatriculation);
    
    try {
      // D'abord essayer de r√©cup√©rer depuis le cache
      final QuerySnapshot cacheSnapshot = await query.get(GetOptions(source: Source.cache));
      
      // Si des r√©sultats sont trouv√©s dans le cache, les retourner
      if (!cacheSnapshot.docs.isEmpty) {
        print('üìã V√©hicule avec immatriculation $immatriculation r√©cup√©r√© depuis le cache');
        return cacheSnapshot;
      }
      
      // Sinon, r√©cup√©rer depuis le serveur
      final QuerySnapshot serverSnapshot = await query.get(GetOptions(source: Source.server));
      print('üîÑ V√©hicule avec immatriculation $immatriculation r√©cup√©r√© depuis le serveur');
      return serverSnapshot;
    } catch (e) {
      // En cas d'erreur (ex: hors ligne), essayer de r√©cup√©rer depuis le cache
      try {
        print('‚ö†Ô∏è Erreur serveur, tentative de r√©cup√©ration depuis le cache: $e');
        return await query.get(GetOptions(source: Source.cache));
      } catch (cacheError) {
        print('‚ùå Erreur cache: $cacheError');
        rethrow;
      }
    }
  }
  
  // M√©thode pour r√©cup√©rer l'ID cible (utilisateur actuel ou admin)
  String? getTargetUserId() {
    return _targetUserId ?? _auth.currentUser?.uid;
  }
}
