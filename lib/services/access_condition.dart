import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '../USERS/contrat_condition.dart';

class AccessCondition {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  static final FirebaseAuth _auth = FirebaseAuth.instance;

  /// R√©cup√®re les conditions du contrat pour un utilisateur (admin ou collaborateur)
  static Future<Map<String, dynamic>?> getContractConditions() async {
    try {
      final user = _auth.currentUser;
      if (user == null) {
        print('‚ùå Aucun utilisateur connect√©');
        return {'texte': ContratModifier.defaultContract};
      }

      final uid = user.uid;
      
      // R√©cup√©rer les donn√©es d'authentification directement
      print('üîç V√©rification des donn√©es authentification pour les conditions');
      final authDocRef = _firestore
          .collection('users')
          .doc(uid)
          .collection('authentification')
          .doc(uid);
          
      final authDoc = await authDocRef.get(GetOptions(source: Source.server));
      
      if (!authDoc.exists) {
        print('üîç Document auth non trouv√©, v√©rification si collaborateur');
        final userDoc = await _firestore
            .collection('users')
            .doc(uid)
            .get(GetOptions(source: Source.server));
            
        if (!userDoc.exists) {
          print('‚ö†Ô∏è Utilisateur non trouv√©');
          return {'texte': ContratModifier.defaultContract};
        }
        
        final userData = userDoc.data();
        if (userData == null) {
          print('‚ö†Ô∏è Donn√©es utilisateur null');
          return {'texte': ContratModifier.defaultContract};
        }
        
        // V√©rifier si c'est un collaborateur
        if (userData['role'] == 'collaborateur') {
          final adminId = userData['adminId'];
          if (adminId == null) {
            print('‚ùå AdminId non trouv√© pour le collaborateur');
            return {'texte': ContratModifier.defaultContract};
          }
          
          print('üë§ Collaborateur d√©tect√©, utilisation de l\'ID admin: $adminId');
          
          // Pour un collaborateur, r√©cup√©rer les conditions de l'admin
          final adminConditionsDoc = await _firestore
              .collection('users')
              .doc(adminId)
              .collection('contrats')
              .doc('userId')
              .get(GetOptions(source: Source.server));
          
          if (!adminConditionsDoc.exists) {
            print('‚ö†Ô∏è Document conditions admin non trouv√©, utilisation des conditions par d√©faut');
            return {'texte': ContratModifier.defaultContract};
          }
          
          final adminConditionsData = adminConditionsDoc.data();
          if (adminConditionsData == null || adminConditionsData['texte'] == null) {
            print('‚ö†Ô∏è Donn√©es conditions admin invalides, utilisation des conditions par d√©faut');
            return {'texte': ContratModifier.defaultContract};
          }
          
          print('‚úÖ Conditions trouv√©es pour l\'admin');
          return {'texte': adminConditionsData['texte']};
        }
      } else {
        // Document d'authentification trouv√©
        final authData = authDoc.data();
        if (authData == null) {
          print('‚ö†Ô∏è Donn√©es auth null');
          return {'texte': ContratModifier.defaultContract};
        }
        
        // V√©rifier si c'est un collaborateur via les donn√©es d'auth
        if (authData['role'] == 'collaborateur') {
          final adminId = authData['adminId'];
          if (adminId == null) {
            print('‚ùå AdminId non trouv√© dans les donn√©es d\'authentification');
            return {'texte': ContratModifier.defaultContract};
          }
          
          print('üë§ Collaborateur d√©tect√© (auth), utilisation de l\'ID admin: $adminId');
          
          // Pour un collaborateur, r√©cup√©rer les conditions de l'admin
          final adminConditionsDoc = await _firestore
              .collection('users')
              .doc(adminId)
              .collection('contrats')
              .doc('userId')
              .get(GetOptions(source: Source.server));
          
          if (!adminConditionsDoc.exists) {
            print('‚ö†Ô∏è Document conditions admin non trouv√©, utilisation des conditions par d√©faut');
            return {'texte': ContratModifier.defaultContract};
          }
          
          final adminConditionsData = adminConditionsDoc.data();
          if (adminConditionsData == null || adminConditionsData['texte'] == null) {
            print('‚ö†Ô∏è Donn√©es conditions admin invalides, utilisation des conditions par d√©faut');
            return {'texte': ContratModifier.defaultContract};
          }
          
          print('‚úÖ Conditions trouv√©es pour l\'admin');
          return {'texte': adminConditionsData['texte']};
        }
      }
      
      // Pour un utilisateur normal (non collaborateur)
      final conditionsDoc = await _firestore
          .collection('users')
          .doc(uid)
          .collection('contrats')
          .doc('userId')
          .get(GetOptions(source: Source.server));
      
      if (!conditionsDoc.exists) {
        print('‚ö†Ô∏è Document conditions non trouv√©, utilisation des conditions par d√©faut');
        return {'texte': ContratModifier.defaultContract};
      }
      
      final conditionsData = conditionsDoc.data();
      if (conditionsData == null || conditionsData['texte'] == null) {
        print('‚ö†Ô∏è Donn√©es conditions invalides, utilisation des conditions par d√©faut');
        return {'texte': ContratModifier.defaultContract};
      }
      
      print('‚úÖ Conditions trouv√©es');
      return {'texte': conditionsData['texte']};
    } catch (e) {
      print('‚ùå Erreur lors de la r√©cup√©ration des conditions: $e');
      return {'texte': ContratModifier.defaultContract};
    }
  }
  
  /// Met √† jour les conditions du contrat pour un utilisateur (admin ou collaborateur)
  static Future<bool> updateContractConditions(Map<String, dynamic> conditions) async {
    try {
      final user = _auth.currentUser;
      if (user == null) {
        print('‚ùå Aucun utilisateur connect√©');
        return false;
      }
      
      String targetUserId = user.uid;
      bool isCollaborateur = false;
      
      // R√©cup√©rer les donn√©es d'authentification directement
      print('üîç V√©rification des donn√©es authentification pour la mise √† jour');
      final authDocRef = _firestore
          .collection('users')
          .doc(user.uid)
          .collection('authentification')
          .doc(user.uid);
          
      final authDoc = await authDocRef.get(GetOptions(source: Source.server));
      
      if (!authDoc.exists) {
        print('üîç Document auth non trouv√©, v√©rification si collaborateur');
        final userDoc = await _firestore
            .collection('users')
            .doc(user.uid)
            .get(GetOptions(source: Source.server));
            
        if (!userDoc.exists) {
          print('‚ö†Ô∏è Utilisateur non trouv√©');
          return false;
        }
        
        final userData = userDoc.data();
        if (userData == null) {
          print('‚ö†Ô∏è Donn√©es utilisateur null');
          return false;
        }
        
        // V√©rifier si c'est un collaborateur
        isCollaborateur = userData['role'] == 'collaborateur';
        if (isCollaborateur) {
          final adminId = userData['adminId'];
          if (adminId == null) {
            print('‚ùå AdminId non trouv√© pour le collaborateur');
            return false;
          }
          targetUserId = adminId;
          print('üë§ Collaborateur d√©tect√©, utilisation de l\'ID admin: $targetUserId');
        }
      } else {
        // Document d'authentification trouv√©
        final authData = authDoc.data();
        if (authData == null) {
          print('‚ö†Ô∏è Donn√©es auth null');
          return false;
        }
        
        // V√©rifier si c'est un collaborateur via les donn√©es d'auth
        isCollaborateur = authData['role'] == 'collaborateur';
        if (isCollaborateur) {
          final adminId = authData['adminId'];
          if (adminId == null) {
            print('‚ùå AdminId non trouv√© dans les donn√©es d\'authentification');
            return false;
          }
          targetUserId = adminId;
          print('üë§ Collaborateur d√©tect√© (auth), utilisation de l\'ID admin: $targetUserId');
        }
      }
      
      print('üìù Mise √† jour des conditions pour l\'ID: $targetUserId');
      print('üìù Chemin de mise √† jour: users/$targetUserId/contrats/userId');
      
      // Mettre √† jour les conditions du contrat
      await _firestore
          .collection('users')
          .doc(targetUserId)
          .collection('contrats')
          .doc('userId')
          .set(conditions, SetOptions(merge: true));
      
      print('‚úÖ Conditions mises √† jour avec succ√®s');
      return true;
    } catch (e) {
      print('‚ùå Erreur lors de la mise √† jour des conditions: $e');
      return false;
    }
  }
}
