import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';

/// Utilitaire pour g√©rer l'acc√®s aux donn√©es pour les collaborateurs
class CollaborateurUtil {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  static final FirebaseAuth _auth = FirebaseAuth.instance;

  /// V√©rifie si l'utilisateur actuel est un collaborateur
  /// Retourne un Map contenant:
  /// - isCollaborateur: true si l'utilisateur est un collaborateur
  /// - adminId: l'ID de l'administrateur si l'utilisateur est un collaborateur
  /// - userId: l'ID de l'utilisateur actuel
  static Future<Map<String, dynamic>> checkCollaborateurStatus() async {
    final user = _auth.currentUser;
    if (user == null) {
      return {
        'isCollaborateur': false,
        'adminId': null,
        'userId': null,
      };
    }

    try {
      final userDoc = await _firestore.collection('users').doc(user.uid).get();
      
      if (userDoc.exists && userDoc.data()?['role'] == 'collaborateur') {
        final adminId = userDoc.data()?['adminId'];
        print('üë• Collaborateur d√©tect√©, administrateur associ√©: $adminId');
        
        return {
          'isCollaborateur': true,
          'adminId': adminId,
          'userId': user.uid,
        };
      }
    } catch (e) {
      print('‚ùå Erreur lors de la v√©rification du statut collaborateur: $e');
    }
    
    return {
      'isCollaborateur': false,
      'adminId': null,
      'userId': user.uid,
    };
  }

  /// R√©cup√®re les donn√©es d'authentification de l'utilisateur (admin ou collaborateur)
  /// Pour un collaborateur, r√©cup√®re les donn√©es de son administrateur
  static Future<Map<String, dynamic>> getAuthData() async {
    final status = await checkCollaborateurStatus();
    final userId = status['userId'];
    
    if (userId == null) {
      return {};
    }
    
    // D√©terminer l'ID √† utiliser pour r√©cup√©rer les donn√©es d'authentification
    final targetId = status['isCollaborateur'] ? status['adminId'] : userId;
    
    if (targetId == null) {
      return {};
    }
    
    try {
      // Essayer d'abord depuis le cache
      final docCache = await _firestore
          .collection('users')
          .doc(targetId)
          .collection('authentification')
          .doc(targetId)
          .get(GetOptions(source: Source.cache));
      
      if (docCache.exists) {
        print('üìã Donn√©es authentification r√©cup√©r√©es depuis le cache');
        return docCache.data() as Map<String, dynamic>;
      }
      
      // Si pas dans le cache et utilisateur est admin, essayer depuis le serveur
      if (!status['isCollaborateur']) {
        final docServer = await _firestore
            .collection('users')
            .doc(targetId)
            .collection('authentification')
            .doc(targetId)
            .get();
            
        if (docServer.exists) {
          print('üîÑ Donn√©es authentification r√©cup√©r√©es depuis le serveur');
          return docServer.data() as Map<String, dynamic>;
        }
      } else {
        // Pour les collaborateurs sans acc√®s au cache, utiliser des valeurs par d√©faut
        print('üë• Collaborateur sans acc√®s au cache, utilisation des valeurs par d√©faut');
      }
    } catch (e) {
      print('‚ùå Erreur r√©cup√©ration donn√©es authentification: $e');
    }
    
    return {};
  }
  
  /// R√©cup√®re les donn√©es d'un document dans une collection sp√©cifique
  /// Pour un collaborateur, utilise l'ID de l'administrateur si n√©cessaire
  static Future<DocumentSnapshot> getDocument({
    required String collection,
    required String docId,
    String? subCollection,
    String? subDocId,
    bool useAdminId = false,
  }) async {
    final status = await checkCollaborateurStatus();
    final userId = status['userId'];
    
    if (userId == null) {
      throw Exception('Utilisateur non connect√©');
    }
    
    // D√©terminer l'ID √† utiliser
    final targetId = (useAdminId && status['isCollaborateur']) 
        ? status['adminId'] 
        : userId;
    
    if (targetId == null) {
      throw Exception('ID cible non disponible');
    }
    
    try {
      // Construire la r√©f√©rence au document
      DocumentReference docRef = _firestore.collection(collection).doc(docId);
      
      // Ajouter la sous-collection si n√©cessaire
      if (subCollection != null) {
        docRef = docRef.collection(subCollection).doc(subDocId ?? docId);
      }
      
      // Essayer d'abord depuis le cache
      final docCache = await docRef.get(GetOptions(source: Source.cache));
      
      if (docCache.exists) {
        print('üìã Document r√©cup√©r√© depuis le cache: $collection/$docId${subCollection != null ? "/$subCollection/${subDocId ?? docId}" : ""}');
        return docCache;
      }
      
      // Si pas dans le cache, essayer depuis le serveur
      final docServer = await docRef.get();
      
      if (docServer.exists) {
        print('üîÑ Document r√©cup√©r√© depuis le serveur: $collection/$docId${subCollection != null ? "/$subCollection/${subDocId ?? docId}" : ""}');
        return docServer;
      }
      
      print('‚ö†Ô∏è Document non trouv√©: $collection/$docId${subCollection != null ? "/$subCollection/${subDocId ?? docId}" : ""}');
      return docServer; // Retourner le document vide
      
    } catch (e) {
      print('‚ùå Erreur r√©cup√©ration document: $e');
      throw e;
    }
  }
  
  /// R√©cup√®re les documents d'une collection sp√©cifique
  /// Pour un collaborateur, utilise l'ID de l'administrateur si n√©cessaire
  static Future<QuerySnapshot> getCollection({
    required String collection,
    required String docId,
    required String subCollection,
    Query Function(Query)? queryBuilder,
    bool useAdminId = false,
  }) async {
    final status = await checkCollaborateurStatus();
    final userId = status['userId'];
    
    if (userId == null) {
      throw Exception('Utilisateur non connect√©');
    }
    
    // D√©terminer l'ID √† utiliser
    final targetId = (useAdminId && status['isCollaborateur']) 
        ? status['adminId'] 
        : userId;
    
    if (targetId == null) {
      throw Exception('ID cible non disponible');
    }
    
    try {
      // Construire la r√©f√©rence √† la collection
      Query query = _firestore
          .collection(collection)
          .doc(docId)
          .collection(subCollection);
      
      // Appliquer le constructeur de requ√™te si fourni
      if (queryBuilder != null) {
        query = queryBuilder(query);
      }
      
      // Essayer d'abord depuis le cache
      final queryCache = await query.get(GetOptions(source: Source.cache));
      
      if (!queryCache.docs.isEmpty) {
        print('üìã Collection r√©cup√©r√©e depuis le cache: $collection/$docId/$subCollection');
        return queryCache;
      }
      
      // Si pas dans le cache, essayer depuis le serveur
      final queryServer = await query.get();
      
      print('üîÑ Collection r√©cup√©r√©e depuis le serveur: $collection/$docId/$subCollection (${queryServer.docs.length} documents)');
      return queryServer;
      
    } catch (e) {
      print('‚ùå Erreur r√©cup√©ration collection: $e');
      throw e;
    }
  }
}
