import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';

/// Utilitaire pour g√©rer l'acc√®s aux donn√©es pour les collaborateurs
class CollaborateurUtil {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  static final FirebaseAuth _auth = FirebaseAuth.instance;

  /// V√©rifie si l'utilisateur actuel est un collaborateur
  /// Retourne un Map contenant:
  /// - isCollaborateur: true si l'utilisateur est un collaborateur
  /// - adminId: l'ID de l'administrateur si l'utilisateur est un collaborateur
  /// - userId: l'ID de l'utilisateur actuel
  static Future<Map<String, dynamic>> checkCollaborateurStatus() async {
    final user = _auth.currentUser;
    if (user == null) {
      return {
        'isCollaborateur': false,
        'adminId': null,
        'userId': null,
      };
    }

    try {
      final userDoc = await _firestore.collection('users').doc(user.uid).get();
      
      if (userDoc.exists && userDoc.data()?['role'] == 'collaborateur') {
        final adminId = userDoc.data()?['adminId'];
        print('üë• Collaborateur d√©tect√©, administrateur associ√©: $adminId');
        
        return {
          'isCollaborateur': true,
          'adminId': adminId,
          'userId': user.uid,
        };
      }
    } catch (e) {
      print('‚ùå Erreur lors de la v√©rification du statut collaborateur: $e');
    }
    
    return {
      'isCollaborateur': false,
      'adminId': null,
      'userId': user.uid,
    };
  }

  /// R√©cup√®re les donn√©es d'authentification de l'utilisateur (admin ou collaborateur)
  /// Pour un collaborateur, r√©cup√®re les donn√©es de son administrateur
  static Future<Map<String, dynamic>> getAuthData() async {
    final user = _auth.currentUser;
    if (user == null) {
      return {};
    }
    
    try {
      print('üë§ Chargement des donn√©es utilisateur...');
      
      // Note: La v√©rification RevenueCat est g√©r√©e dans info_user.dart

      // V√©rifier si l'utilisateur est un collaborateur
      final userDoc = await _firestore.collection('users').doc(user.uid).get();
      
      if (userDoc.exists && userDoc.data()?['role'] == 'collaborateur') {
        // C'est un collaborateur, r√©cup√©rer ses propres donn√©es
        print('üë• Utilisateur collaborateur d√©tect√©');
        
        // R√©cup√©rer l'ID de l'admin pour r√©f√©rence
        final adminId = userDoc.data()?['adminId'];
        if (adminId != null) {
          print('üë• Administrateur associ√©: $adminId');
          
          // Essayer d'abord depuis le cache
          try {
            final docCache = await _firestore
                .collection('users')
                .doc(adminId)
                .collection('authentification')
                .doc(adminId)
                .get(GetOptions(source: Source.cache));
            
            if (docCache.exists) {
              print('üìã Donn√©es authentification admin r√©cup√©r√©es depuis le cache');
              return docCache.data() as Map<String, dynamic>;
            }
          } catch (e) {
            print('‚ö†Ô∏è Cache non disponible: $e');
          }
          
          // Si pas dans le cache, essayer depuis le serveur
          try {
            final docServer = await _firestore
                .collection('users')
                .doc(adminId)
                .collection('authentification')
                .doc(adminId)
                .get();
                
            if (docServer.exists) {
              print('üîÑ Donn√©es authentification admin r√©cup√©r√©es depuis le serveur');
              return docServer.data() as Map<String, dynamic>;
            }
          } catch (e) {
            print('‚ùå Erreur r√©cup√©ration donn√©es admin: $e');
          }
        }
        
        // Si on n'a pas pu r√©cup√©rer les donn√©es de l'admin, utiliser les donn√©es du collaborateur
        return userDoc.data() as Map<String, dynamic>;
      } else {
        // C'est un administrateur, continuer normalement
        try {
          final userData = await _firestore
              .collection('users')
              .doc(user.uid)
              .collection('authentification')
              .doc(user.uid)
              .get();

          if (userData.exists) {
            print('üìã Donn√©es authentification admin r√©cup√©r√©es');
            return userData.data() as Map<String, dynamic>;
          }
        } catch (e) {
          print('‚ùå Erreur r√©cup√©ration donn√©es authentification: $e');
        }
      }
    } catch (e) {
      print('‚ùå Erreur g√©n√©rale r√©cup√©ration donn√©es: $e');
    }
    
    return {};
  }
  
  /// R√©cup√®re les donn√©es d'un document dans une collection sp√©cifique
  /// Pour un collaborateur, utilise l'ID de l'administrateur si n√©cessaire
  static Future<DocumentSnapshot> getDocument({
    required String collection,
    required String docId,
    String? subCollection,
    String? subDocId,
    bool useAdminId = false,
  }) async {
    final status = await checkCollaborateurStatus();
    final userId = status['userId'];
    
    if (userId == null) {
      throw Exception('Utilisateur non connect√©');
    }
    
    // D√©terminer l'ID √† utiliser
    final targetId = (useAdminId && status['isCollaborateur']) 
        ? status['adminId'] 
        : userId;
    
    if (targetId == null) {
      throw Exception('ID cible non disponible');
    }
    
    try {
      // Construire la r√©f√©rence au document
      DocumentReference docRef = _firestore.collection(collection).doc(docId);
      
      // Ajouter la sous-collection si n√©cessaire
      if (subCollection != null) {
        docRef = docRef.collection(subCollection).doc(subDocId ?? docId);
      }
      
      // Essayer d'abord depuis le cache
      final docCache = await docRef.get(GetOptions(source: Source.cache));
      
      if (docCache.exists) {
        print('üìã Document r√©cup√©r√© depuis le cache: $collection/$docId${subCollection != null ? "/$subCollection/${subDocId ?? docId}" : ""}');
        return docCache;
      }
      
      // Si pas dans le cache, essayer depuis le serveur
      final docServer = await docRef.get();
      
      if (docServer.exists) {
        print('üîÑ Document r√©cup√©r√© depuis le serveur: $collection/$docId${subCollection != null ? "/$subCollection/${subDocId ?? docId}" : ""}');
        return docServer;
      }
      
      print('‚ö†Ô∏è Document non trouv√©: $collection/$docId${subCollection != null ? "/$subCollection/${subDocId ?? docId}" : ""}');
      return docServer; // Retourner le document vide
      
    } catch (e) {
      print('‚ùå Erreur r√©cup√©ration document: $e');
      throw e;
    }
  }
  
  /// R√©cup√®re les documents d'une collection sp√©cifique
  /// Pour un collaborateur, utilise l'ID de l'administrateur si n√©cessaire
  static Future<QuerySnapshot> getCollection({
    required String collection,
    required String docId,
    required String subCollection,
    Query Function(Query)? queryBuilder,
    bool useAdminId = false,
  }) async {
    final status = await checkCollaborateurStatus();
    final userId = status['userId'];
    
    if (userId == null) {
      throw Exception('Utilisateur non connect√©');
    }
    
    // D√©terminer l'ID √† utiliser
    final targetId = (useAdminId && status['isCollaborateur']) 
        ? status['adminId'] 
        : userId;
    
    if (targetId == null) {
      throw Exception('ID cible non disponible');
    }
    
    try {
      // Construire la r√©f√©rence √† la collection
      Query query = _firestore
          .collection(collection)
          .doc(docId)
          .collection(subCollection);
      
      // Appliquer le constructeur de requ√™te si fourni
      if (queryBuilder != null) {
        query = queryBuilder(query);
      }
      
      // Essayer d'abord depuis le cache
      final queryCache = await query.get(GetOptions(source: Source.cache));
      
      if (!queryCache.docs.isEmpty) {
        print('üìã Collection r√©cup√©r√©e depuis le cache: $collection/$docId/$subCollection');
        return queryCache;
      }
      
      // Si pas dans le cache, essayer depuis le serveur
      final queryServer = await query.get();
      
      print('üîÑ Collection r√©cup√©r√©e depuis le serveur: $collection/$docId/$subCollection (${queryServer.docs.length} documents)');
      return queryServer;
      
    } catch (e) {
      print('‚ùå Erreur r√©cup√©ration collection: $e');
      throw e;
    }
  }

  /// V√©rifie si l'utilisateur (ou son administrateur) a un abonnement premium
  /// Cette m√©thode remplace SubscriptionManager.isPremiumUser()
  static Future<bool> isPremiumUser() async {
    final userData = await getAuthData();
    
    if (userData.isEmpty) {
      // V√©rifier si c'est un collaborateur sans acc√®s aux donn√©es d'authentification
      final status = await checkCollaborateurStatus();
      if (status['isCollaborateur'] == true) {
        print('üë• Collaborateur d√©tect√©, acc√®s premium accord√© par d√©faut');
        return true; // Accorder l'acc√®s premium aux collaborateurs par d√©faut
      }
      return false;
    }
    
    final subscriptionId = userData['subscriptionId'] ?? 'free';
    final cb_subscription = userData['cb_subscription'] ?? 'free';
    
    // L'utilisateur est premium si l'un des deux abonnements est premium
    return subscriptionId == 'premium-monthly_access' ||
        subscriptionId == 'premium-yearly_access' ||
        cb_subscription == 'premium-monthly_access' ||
        cb_subscription == 'premium-yearly_access';
  }

  /// V√©rifie si un collaborateur a une permission sp√©cifique
  /// Param√®tres:
  /// - permissionType: 'lecture', 'ecriture', ou 'suppression'
  static Future<bool> checkCollaborateurPermission(String permissionType) async {
    try {
      final status = await checkCollaborateurStatus();
      
      // Si l'utilisateur n'est pas un collaborateur, on retourne true (admin a toutes les permissions)
      if (status['isCollaborateur'] != true) {
        return true;
      }
      
      final userId = status['userId'];
      final adminId = status['adminId'];
      
      if (userId == null || adminId == null) {
        print("‚ùå Identifiants manquants pour la v√©rification des permissions");
        return false;
      }
      
      // R√©cup√©rer les donn√©es du collaborateur depuis son propre document user
      // Cette approche respecte les r√®gles de s√©curit√© Firestore
      final userDoc = await _firestore.collection('users').doc(userId).get();
      
      if (!userDoc.exists) {
        print("‚ùå Document utilisateur non trouv√©");
        return false;
      }
      
      // V√©rifier si le document contient des permissions
      final permissions = userDoc.data()?['permissions'];
      if (permissions == null) {
        print("‚ùå Permissions non d√©finies dans le document utilisateur");
        
        // Essayer de r√©cup√©rer depuis la collection collaborateurs si on a les droits
        try {
          final collaborateurDoc = await _firestore
              .collection('users')
              .doc(adminId)
              .collection('collaborateurs')
              .doc(userId)
              .get();
          
          if (collaborateurDoc.exists) {
            final collabPermissions = collaborateurDoc.data()?['permissions'];
            if (collabPermissions != null) {
              return collabPermissions[permissionType] == true;
            }
          }
        } catch (e) {
          print("‚ö†Ô∏è Impossible d'acc√©der aux permissions dans la collection collaborateurs: $e");
        }
        
        return false;
      }
      
      return permissions[permissionType] == true;
    } catch (e) {
      print("‚ùå Erreur lors de la v√©rification des permissions: $e");
      return false;
    }
  }
}
