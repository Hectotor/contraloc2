import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';

class AccessPlatinum {
  /// V√©rifie si l'utilisateur (ou son administrateur) a un abonnement platinum
  static Future<bool> isPlatinumUser() async {
    try {
      print('üîç V√©rification du statut platinum');
      
      // V√©rifier si l'utilisateur est connect√©
      final user = FirebaseAuth.instance.currentUser;
      if (user == null) {
        print('‚ùå Aucun utilisateur connect√©');
        return false;
      }

      final uid = user.uid;
      print('üìù Utilisateur connect√©: $uid');

      try {
        // R√©cup√©rer d'abord les informations sur l'utilisateur pour savoir s'il est collaborateur
        final userDocRef = FirebaseFirestore.instance.collection('users').doc(uid);
        final userDoc = await userDocRef.get(const GetOptions(source: Source.server));
        
        final userData = userDoc.data();
        if (userData == null) {
          // Essayer d'acc√©der directement √† l'authentification comme admin
          print('üìù Essai d\'acc√®s direct aux donn√©es d\'authentification comme administrateur');
          final authDocRef = FirebaseFirestore.instance
              .collection('users')
              .doc(uid)
              .collection('authentification')
              .doc(uid);
          
          final authDoc = await authDocRef.get(const GetOptions(source: Source.server));
          return _checkPlatinumStatus(authDoc.data());
        }
        
        // V√©rifier si c'est un collaborateur
        if (userData['role'] == 'collaborateur') {
          final adminId = userData['adminId'] as String?;
          if (adminId == null) {
            print('‚ùå AdminId non trouv√© pour le collaborateur');
            return false;
          }
          
          print('üë• Collaborateur d√©tect√© - V√©rification du statut platinum de l\'admin: $adminId');
          
          // V√©rifier l'authentification de l'administrateur
          final adminAuthDocRef = FirebaseFirestore.instance
              .collection('users')
              .doc(adminId)
              .collection('authentification')
              .doc(adminId);
          
          // Utiliser Source.server pour √©viter les probl√®mes de cache
          final adminAuthDoc = await adminAuthDocRef.get(const GetOptions(source: Source.server));
          return _checkPlatinumStatus(adminAuthDoc.data());
        } else {
          // C'est un administrateur, v√©rifier directement son statut platinum
          print('üëÆ‚Äç‚ôÇÔ∏è Administrateur d√©tect√©, v√©rification directe du statut platinum');
          final authDocRef = FirebaseFirestore.instance
              .collection('users')
              .doc(uid)
              .collection('authentification')
              .doc(uid);
          
          final authDoc = await authDocRef.get(const GetOptions(source: Source.server));
          return _checkPlatinumStatus(authDoc.data());
        }
      } catch (e) {
        print('‚ùå Erreur pendant la r√©cup√©ration des donn√©es utilisateur: $e');
        return false;
      }
    } catch (e) {
      print('‚ùå Erreur globale lors de la v√©rification du statut platinum: $e');
      return false;
    }
  }
  
  /// V√©rifie le statut platinum √† partir des donn√©es d'authentification
  static bool _checkPlatinumStatus(Map<String, dynamic>? authData) {
    if (authData == null) {
      print('‚ùå Donn√©es auth null');
      return false;
    }

    // V√©rifier tous les champs possibles pour platinum
    final subscriptionId = authData['subscriptionId'] ?? 'free';
    final cbSubscription = authData['cb_subscription'] ?? 'free';
    final stripePlanType = authData['stripePlanType'] ?? 'free';
    
    print('üîç Valeurs d\'abonnement trouv√©es: subscriptionId=$subscriptionId, cbSubscription=$cbSubscription, stripePlanType=$stripePlanType');
    
    bool isPlatinum = false;
    String? reason;
    
    if (subscriptionId.toString().contains('platinum')) {
      isPlatinum = true;
      reason = 'üìù Statut platinum trouv√© dans subscriptionId: $subscriptionId';
    } else if (cbSubscription.toString().contains('platinum')) {
      isPlatinum = true;
      reason = 'üìù Statut platinum trouv√© dans cb_subscription: $cbSubscription';
    } else if (stripePlanType.toString().contains('platinum')) {
      isPlatinum = true;
      reason = 'üìù Statut platinum trouv√© dans stripePlanType: $stripePlanType';
    } else {
      reason = '‚ùå Aucun statut platinum trouv√©';
    }
    
    print(reason);
    print('flutter: _isPlatinumUser d√©fini √†: $isPlatinum');
    return isPlatinum;
  }
}
