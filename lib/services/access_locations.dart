import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';

/// Utilitaire pour g√©rer l'acc√®s aux locations pour les collaborateurs et admins
/// Permet de s'assurer que les locations sont toujours acc√©d√©es via l'ID admin
/// pour les collaborateurs, et via l'ID utilisateur pour les admins

class AccessLocations {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  static final FirebaseAuth _auth = FirebaseAuth.instance;

  /// R√©cup√®re un contrat sp√©cifique
  /// Pour un collaborateur, utilise l'ID de l'admin
  static Future<Map<String, dynamic>?> getContract(String contratId) async {
    final user = _auth.currentUser;
    if (user == null) return null;

    try {
      // R√©cup√©rer les donn√©es de l'utilisateur
      final userDoc = await _firestore
          .collection('users')
          .doc(user.uid)
          .get(GetOptions(source: Source.server));

      if (!userDoc.exists) {
        print('‚ùå Document utilisateur non trouv√©');
        return null;
      }

      final userData = userDoc.data() ?? {};
      final isCollaborateur = userData['role']?.toString() == 'collaborateur';
      final targetId = isCollaborateur ? userData['adminId']?.toString() : user.uid;

      if (targetId == null) {
        print('‚ùå ID cible non trouv√©');
        return null;
      }

      // R√©cup√©rer le contrat
      final contratDoc = await _firestore
          .collection('users')
          .doc(targetId)
          .collection('locations')
          .doc(contratId)
          .get(GetOptions(source: Source.server));

      if (!contratDoc.exists) {
        print('‚ùå Contrat non trouv√©');
        return null;
      }

      return contratDoc.data() ?? {};
    } catch (e) {
      print('‚ùå Erreur lors de la r√©cup√©ration du contrat: $e');
      return null;
    }
  }

  /// Met √† jour un contrat
  /// Pour un collaborateur, utilise l'ID de l'admin
  static Future<void> updateContract(String contratId, Map<String, dynamic> data) async {
    final user = _auth.currentUser;
    if (user == null) throw Exception('Aucun utilisateur connect√©');

    try {
      // R√©cup√©rer les donn√©es de l'utilisateur
      final userDoc = await _firestore
          .collection('users')
          .doc(user.uid)
          .get(GetOptions(source: Source.server));

      if (!userDoc.exists) {
        throw Exception('Document utilisateur non trouv√©');
      }

      final userData = userDoc.data() ?? {};
      final isCollaborateur = userData['role']?.toString() == 'collaborateur';
      final targetId = isCollaborateur ? userData['adminId']?.toString() : user.uid;

      if (targetId == null) {
        throw Exception('ID cible non trouv√©');
      }

      print('üìù Mise √† jour du contrat - targetId: $targetId, isCollaborateur: $isCollaborateur');
      print('üìù Chemin de la mise √† jour: users/$targetId/locations/$contratId');
      
      // Mettre √† jour le contrat
      await _firestore
          .collection('users')
          .doc(targetId)
          .collection('locations')
          .doc(contratId)
          .set(data, SetOptions(merge: true))
          .then((_) {
            print('‚úÖ Document mis √† jour avec succ√®s');
          })
          .catchError((error) {
            print('‚ùå Erreur lors de la mise √† jour: $error');
            throw error;
          });
    } catch (e) {
      print('‚ùå Erreur lors de la mise √† jour du contrat: $e');
      rethrow;
    }
  }

  /// Cr√©e un nouveau contrat
  /// Pour un collaborateur, utilise l'ID de l'admin
  static Future<String> createContract(Map<String, dynamic> data) async {
    final user = _auth.currentUser;
    if (user == null) throw Exception('Aucun utilisateur connect√©');

    try {
      // R√©cup√©rer les donn√©es de l'utilisateur
      final userDoc = await _firestore
          .collection('users')
          .doc(user.uid)
          .get(GetOptions(source: Source.server));

      if (!userDoc.exists) {
        throw Exception('Document utilisateur non trouv√©');
      }

      final userData = userDoc.data() ?? {};
      final isCollaborateur = userData['role']?.toString() == 'collaborateur';
      final targetId = isCollaborateur ? userData['adminId']?.toString() : user.uid;

      if (targetId == null) {
        throw Exception('ID cible non trouv√©');
      }

      // Cr√©er le contrat
      final contratRef = _firestore
          .collection('users')
          .doc(targetId)
          .collection('locations')
          .doc();

      await contratRef.set(data, SetOptions(merge: true));
      return contratRef.id;
    } catch (e) {
      print('‚ùå Erreur lors de la cr√©ation du contrat: $e');
      rethrow;
    }
  }

  /// Supprime un contrat
  /// Pour un collaborateur, utilise l'ID de l'admin
  static Future<void> deleteContract(String contratId) async {
    final user = _auth.currentUser;
    if (user == null) throw Exception('Aucun utilisateur connect√©');

    try {
      // R√©cup√©rer les donn√©es de l'utilisateur
      final userDoc = await _firestore
          .collection('users')
          .doc(user.uid)
          .get(GetOptions(source: Source.server));

      if (!userDoc.exists) {
        throw Exception('Document utilisateur non trouv√©');
      }

      final userData = userDoc.data() ?? {};
      final isCollaborateur = userData['role']?.toString() == 'collaborateur';
      final targetId = isCollaborateur ? userData['adminId']?.toString() : user.uid;

      if (targetId == null) {
        throw Exception('ID cible non trouv√©');
      }

      // Supprimer le contrat
      await _firestore
          .collection('users')
          .doc(targetId)
          .collection('locations')
          .doc(contratId)
          .delete();
    } catch (e) {
      print('‚ùå Erreur lors de la suppression du contrat: $e');
      rethrow;
    }
  }

  /// R√©cup√®re les donn√©es d'authentification de l'utilisateur (admin ou collaborateur)
  static Future<Map<String, dynamic>> getAuthData() async {
    try {
      final user = _auth.currentUser;
      if (user == null) return {};

      // R√©cup√©rer les donn√©es de l'utilisateur
      final userDoc = await _firestore
          .collection('users')
          .doc(user.uid)
          .get(GetOptions(source: Source.server));

      if (!userDoc.exists) {
        print('‚ùå Document utilisateur non trouv√©');
        return {};
      }

      final userData = userDoc.data() ?? {};
      print('‚úÖ Donn√©es utilisateur: $userData');
      
      // V√©rifier si c'est un collaborateur
      final role = userData['role']?.toString();
      final isCollaborateur = role == 'collaborateur';
      print('üë§ Role collaborateur: $isCollaborateur');

      // R√©cup√©rer l'adminId
      String? adminId;
      if (isCollaborateur) {
        adminId = userData['adminId']?.toString();
        print('üìù AdminId trouv√©: $adminId');
        if (adminId == null) {
          print('‚ùå AdminId non trouv√© dans les donn√©es utilisateur');
          return {};
        }
      } else {
        adminId = user.uid;
      }

      print('üë§ Admin ID final: $adminId');
      
      return {
        'isCollaborateur': isCollaborateur,
        'adminId': adminId,
        'userId': user.uid,
        'role': role,
        'userData': userData
      };
    } catch (e) {
      print('‚ùå Erreur lors de la r√©cup√©ration des donn√©es: $e');
      return {};
    }
  }
}
