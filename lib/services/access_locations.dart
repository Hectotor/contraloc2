import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';

/// Utilitaire pour g√©rer l'acc√®s aux locations pour les collaborateurs et admins
/// Permet de s'assurer que les locations sont toujours acc√©d√©es via l'ID admin
/// pour les collaborateurs, et via l'ID utilisateur pour les admins

class AccessLocations {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  static final FirebaseAuth _auth = FirebaseAuth.instance;

  /// R√©cup√®re un contrat sp√©cifique
  /// Pour un collaborateur, utilise l'ID de l'admin
  static Future<Map<String, dynamic>?> getContract(String contratId) async {
    final user = _auth.currentUser;
    if (user == null) return null;

    try {
      // R√©cup√©rer les donn√©es d'authentification directement
      print('üìù V√©rification des donn√©es authentification pour le contrat');
      final authDocRef = _firestore
          .collection('users')
          .doc(user.uid)
          .collection('authentification')
          .doc(user.uid);
          
      final authDoc = await authDocRef.get(GetOptions(source: Source.server));
      
      String targetId = user.uid;
      bool isCollaborateur = false;
      
      if (!authDoc.exists) {
        print('üìù Document auth non trouv√©, v√©rification si collaborateur');
        // Essayer de r√©cup√©rer depuis le document utilisateur principal
        final userDoc = await _firestore
            .collection('users')
            .doc(user.uid)
            .get(GetOptions(source: Source.server));

        if (!userDoc.exists) {
          print('‚ö†Ô∏è Utilisateur non trouv√©');
          return null;
        }

        final userData = userDoc.data() ?? {};
        isCollaborateur = userData['role']?.toString() == 'collaborateur';
        
        if (isCollaborateur) {
          final adminId = userData['adminId']?.toString();
          if (adminId == null) {
            print('‚ùå AdminId non trouv√© pour le collaborateur');
            return null;
          }
          targetId = adminId;
          print('üë• Collaborateur d√©tect√©, utilisation de l\'ID admin: $targetId');
        }
      } else {
        // Document d'authentification trouv√©
        final authData = authDoc.data() ?? {};
        isCollaborateur = authData['role']?.toString() == 'collaborateur';
        
        if (isCollaborateur) {
          final adminId = authData['adminId']?.toString();
          if (adminId == null) {
            print('‚ùå AdminId non trouv√© dans les donn√©es d\'authentification');
            return null;
          }
          targetId = adminId;
          print('üë• Collaborateur d√©tect√© (auth), utilisation de l\'ID admin: $targetId');
        }
      }

      print('üìù Chemin du contrat: users/$targetId/locations/$contratId');
      
      // R√©cup√©rer le contrat
      final contratDoc = await _firestore
          .collection('users')
          .doc(targetId)
          .collection('locations')
          .doc(contratId)
          .get(GetOptions(source: Source.server));

      if (!contratDoc.exists) {
        print('‚ùå Contrat non trouv√©');
        return null;
      }

      return contratDoc.data() ?? {};
    } catch (e) {
      print('‚ùå Erreur lors de la r√©cup√©ration du contrat: $e');
      return null;
    }
  }

  /// Met √† jour un contrat
  /// Pour un collaborateur, utilise l'ID de l'admin
  static Future<void> updateContract(String contratId, Map<String, dynamic> data) async {
    final user = _auth.currentUser;
    if (user == null) throw Exception('Aucun utilisateur connect√©');

    try {
      // R√©cup√©rer les donn√©es d'authentification directement
      print('üìù V√©rification des donn√©es authentification pour la mise √† jour');
      final authDocRef = _firestore
          .collection('users')
          .doc(user.uid)
          .collection('authentification')
          .doc(user.uid);
          
      final authDoc = await authDocRef.get(GetOptions(source: Source.server));
      
      String targetId = user.uid;
      bool isCollaborateur = false;
      
      if (!authDoc.exists) {
        print('üìù Document auth non trouv√©, v√©rification si collaborateur');
        // Essayer de r√©cup√©rer depuis le document utilisateur principal
        final userDoc = await _firestore
            .collection('users')
            .doc(user.uid)
            .get(GetOptions(source: Source.server));

        if (!userDoc.exists) {
          print('‚ö†Ô∏è Utilisateur non trouv√©');
          throw Exception('Impossible d\'acc√©der au document pour la mise √† jour');
        }

        final userData = userDoc.data() ?? {};
        isCollaborateur = userData['role']?.toString() == 'collaborateur';
        
        if (isCollaborateur) {
          final adminId = userData['adminId']?.toString();
          if (adminId == null) {
            print('‚ùå AdminId non trouv√© pour le collaborateur');
            throw Exception('ID cible non trouv√©');
          }
          targetId = adminId;
          print('üë• Collaborateur d√©tect√©, utilisation de l\'ID admin: $targetId');
        }
      } else {
        // Document d'authentification trouv√©
        final authData = authDoc.data() ?? {};
        isCollaborateur = authData['role']?.toString() == 'collaborateur';
        
        if (isCollaborateur) {
          final adminId = authData['adminId']?.toString();
          if (adminId == null) {
            print('‚ùå AdminId non trouv√© dans les donn√©es d\'authentification');
            throw Exception('ID cible non trouv√©');
          }
          targetId = adminId;
          print('üë• Collaborateur d√©tect√© (auth), utilisation de l\'ID admin: $targetId');
        }
      }

      print('üìù Mise √† jour du contrat - targetId: $targetId, isCollaborateur: $isCollaborateur');
      print('üìù Chemin de la mise √† jour: users/$targetId/locations/$contratId');
      
      // Mettre √† jour le contrat
      await _firestore
          .collection('users')
          .doc(targetId)
          .collection('locations')
          .doc(contratId)
          .set(data, SetOptions(merge: true))
          .then((_) {
            print('‚úÖ Document mis √† jour avec succ√®s');
          })
          .catchError((error) {
            print('‚ùå Erreur lors de la mise √† jour: $error');
            throw error;
          });
    } catch (e) {
      print('‚ùå Erreur lors de la mise √† jour du contrat: $e');
      rethrow;
    }
  }

  /// Cr√©e un nouveau contrat
  /// Pour un collaborateur, utilise l'ID de l'admin
  static Future<String> createContract(Map<String, dynamic> data) async {
    final user = _auth.currentUser;
    if (user == null) throw Exception('Aucun utilisateur connect√©');

    try {
      // R√©cup√©rer les donn√©es d'authentification directement
      print('üìù V√©rification des donn√©es authentification pour la cr√©ation');
      final authDocRef = _firestore
          .collection('users')
          .doc(user.uid)
          .collection('authentification')
          .doc(user.uid);
          
      final authDoc = await authDocRef.get(GetOptions(source: Source.server));
      
      String targetId = user.uid;
      bool isCollaborateur = false;
      
      if (!authDoc.exists) {
        print('üìù Document auth non trouv√©, v√©rification si collaborateur');
        // Essayer de r√©cup√©rer depuis le document utilisateur principal
        final userDoc = await _firestore
            .collection('users')
            .doc(user.uid)
            .get(GetOptions(source: Source.server));

        if (!userDoc.exists) {
          print('‚ö†Ô∏è Utilisateur non trouv√©');
          throw Exception('Impossible d\'acc√©der au document pour la cr√©ation');
        }

        final userData = userDoc.data() ?? {};
        isCollaborateur = userData['role']?.toString() == 'collaborateur';
        
        if (isCollaborateur) {
          final adminId = userData['adminId']?.toString();
          if (adminId == null) {
            print('‚ùå AdminId non trouv√© pour le collaborateur');
            throw Exception('ID cible non trouv√©');
          }
          targetId = adminId;
          print('üë• Collaborateur d√©tect√©, utilisation de l\'ID admin: $targetId');
        }
      } else {
        // Document d'authentification trouv√©
        final authData = authDoc.data() ?? {};
        isCollaborateur = authData['role']?.toString() == 'collaborateur';
        
        if (isCollaborateur) {
          final adminId = authData['adminId']?.toString();
          if (adminId == null) {
            print('‚ùå AdminId non trouv√© dans les donn√©es d\'authentification');
            throw Exception('ID cible non trouv√©');
          }
          targetId = adminId;
          print('üë• Collaborateur d√©tect√© (auth), utilisation de l\'ID admin: $targetId');
        }
      }

      print('üìù Cr√©ation d\'un contrat pour l\'ID: $targetId');
      print('üìù Chemin de cr√©ation: users/$targetId/locations');
      
      // Cr√©er le contrat
      final contratRef = _firestore
          .collection('users')
          .doc(targetId)
          .collection('locations')
          .doc();

      await contratRef.set(data, SetOptions(merge: true));
      print('‚úÖ Contrat cr√©√© avec succ√®s: ${contratRef.id}');
      return contratRef.id;
    } catch (e) {
      print('‚ùå Erreur lors de la cr√©ation du contrat: $e');
      rethrow;
    }
  }

  /// Supprime un contrat
  /// Pour un collaborateur, utilise l'ID de l'admin
  static Future<void> deleteContract(String contratId) async {
    final user = _auth.currentUser;
    if (user == null) throw Exception('Aucun utilisateur connect√©');

    try {
      // R√©cup√©rer les donn√©es d'authentification directement
      print('üìù V√©rification des donn√©es authentification pour la suppression');
      final authDocRef = _firestore
          .collection('users')
          .doc(user.uid)
          .collection('authentification')
          .doc(user.uid);
          
      final authDoc = await authDocRef.get(GetOptions(source: Source.server));
      
      String targetId = user.uid;
      bool isCollaborateur = false;
      
      if (!authDoc.exists) {
        print('üìù Document auth non trouv√©, v√©rification si collaborateur');
        // Essayer de r√©cup√©rer depuis le document utilisateur principal
        final userDoc = await _firestore
            .collection('users')
            .doc(user.uid)
            .get(GetOptions(source: Source.server));

        if (!userDoc.exists) {
          print('‚ö†Ô∏è Utilisateur non trouv√©');
          throw Exception('Impossible d\'acc√©der au document pour la suppression');
        }

        final userData = userDoc.data() ?? {};
        isCollaborateur = userData['role']?.toString() == 'collaborateur';
        
        if (isCollaborateur) {
          final adminId = userData['adminId']?.toString();
          if (adminId == null) {
            print('‚ùå AdminId non trouv√© pour le collaborateur');
            throw Exception('ID cible non trouv√©');
          }
          targetId = adminId;
          print('üë• Collaborateur d√©tect√©, utilisation de l\'ID admin: $targetId');
        }
      } else {
        // Document d'authentification trouv√©
        final authData = authDoc.data() ?? {};
        isCollaborateur = authData['role']?.toString() == 'collaborateur';
        
        if (isCollaborateur) {
          final adminId = authData['adminId']?.toString();
          if (adminId == null) {
            print('‚ùå AdminId non trouv√© dans les donn√©es d\'authentification');
            throw Exception('ID cible non trouv√©');
          }
          targetId = adminId;
          print('üë• Collaborateur d√©tect√© (auth), utilisation de l\'ID admin: $targetId');
        }
      }

      print('üìù Suppression du contrat: $contratId pour l\'ID: $targetId');
      print('üìù Chemin de suppression: users/$targetId/locations/$contratId');
      
      // Supprimer le contrat
      await _firestore
          .collection('users')
          .doc(targetId)
          .collection('locations')
          .doc(contratId)
          .delete();
          
      print('‚úÖ Contrat supprim√© avec succ√®s');
    } catch (e) {
      print('‚ùå Erreur lors de la suppression du contrat: $e');
      rethrow;
    }
  }

  /// R√©cup√®re les donn√©es d'authentification de l'utilisateur (admin ou collaborateur)
  static Future<Map<String, dynamic>> getAuthData() async {
    try {
      final user = _auth.currentUser;
      if (user == null) return {};

      // R√©cup√©rer les donn√©es d'authentification directement
      print('üìù V√©rification des donn√©es authentification');
      final authDocRef = _firestore
          .collection('users')
          .doc(user.uid)
          .collection('authentification')
          .doc(user.uid);
          
      final authDoc = await authDocRef.get(GetOptions(source: Source.server));
      
      bool isCollaborateur = false;
      String? adminId;
      Map<String, dynamic> userData = {};
      
      if (!authDoc.exists) {
        print('üìù Document auth non trouv√©, v√©rification si collaborateur');
        // Essayer de r√©cup√©rer depuis le document utilisateur principal
        final userDoc = await _firestore
            .collection('users')
            .doc(user.uid)
            .get(GetOptions(source: Source.server));

        if (!userDoc.exists) {
          print('‚ö†Ô∏è Utilisateur non trouv√©');
          return {};
        }

        userData = userDoc.data() ?? {};
        print('‚úÖ Donn√©es utilisateur: $userData');
        
        // V√©rifier si c'est un collaborateur
        final role = userData['role']?.toString();
        isCollaborateur = role == 'collaborateur';
        print('üë• Role collaborateur: $isCollaborateur');

        // R√©cup√©rer l'adminId
        if (isCollaborateur) {
          adminId = userData['adminId']?.toString();
          print('üìù AdminId trouv√©: $adminId');
          if (adminId == null) {
            print('‚ùå AdminId non trouv√© dans les donn√©es utilisateur');
            return {};
          }
        } else {
          adminId = user.uid;
        }
      } else {
        // Document d'authentification trouv√©
        userData = authDoc.data() ?? {};
        print('‚úÖ Donn√©es authentification: $userData');
        
        // V√©rifier si c'est un collaborateur
        final role = userData['role']?.toString();
        isCollaborateur = role == 'collaborateur';
        print('üë• Role collaborateur (auth): $isCollaborateur');

        // R√©cup√©rer l'adminId
        if (isCollaborateur) {
          adminId = userData['adminId']?.toString();
          print('üìù AdminId trouv√© (auth): $adminId');
          if (adminId == null) {
            print('‚ùå AdminId non trouv√© dans les donn√©es d\'authentification');
            return {};
          }
        } else {
          adminId = user.uid;
        }
      }

      print('üìù Admin ID final: $adminId');
      
      return {
        'isCollaborateur': isCollaborateur,
        'adminId': adminId,
        'userId': user.uid,
        'role': userData['role'],
        'userData': userData
      };
    } catch (e) {
      print('‚ùå Erreur lors de la r√©cup√©ration des donn√©es: $e');
      return {};
    }
  }
}
