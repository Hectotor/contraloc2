import 'dart:io';
import 'package:mailer/mailer.dart';
import 'package:mailer/smtp_server.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';



Future<void> sendClotureEmailWithPdf({
  required String pdfPath,
  required String email,
  required String marque,
  required String modele,
  required String immatriculation,
  required String kilometrageRetour,
  required String dateFinEffectif,
  required String commentaireRetour,
  required BuildContext context,
  String? prenom,
  String? nom,
  String? nomEntreprise,
  String? adresse,
  String? telephone,
  String? logoUrl,
  bool sendCopyToAdmin = true,
  String? nomCollaborateur,
  String? prenomCollaborateur,
}) async {
  try {
    // R√©cup√©rer les donn√©es de l'utilisateur
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) {
      throw Exception('Utilisateur non connect√©');
    }
    
    // V√©rifier si l'utilisateur est un collaborateur
    String? adminEmail;
    
    try {
      final userDoc = await FirebaseFirestore.instance
          .collection('users')
          .doc(user.uid)
          .get();
      
      if (userDoc.exists && userDoc.data()?['role'] == 'collaborateur') {
        final adminId = userDoc.data()?['adminId'];
        if (adminId != null) {
          print('üë• Collaborateur d√©tect√©, utilisation des donn√©es de l\'administrateur: $adminId');
          
          // R√©cup√©rer les donn√©es de l'entreprise depuis l'admin
          final adminDoc = await FirebaseFirestore.instance
              .collection('users')
              .doc(adminId)
              .get();
          
          if (adminDoc.exists) {
            nomEntreprise ??= adminDoc.data()?['nomEntreprise'];
            adresse ??= adminDoc.data()?['adresse'];
            telephone ??= adminDoc.data()?['telephone'];
            logoUrl ??= adminDoc.data()?['logoUrl'];
          }
          
          // R√©cup√©rer l'email de l'administrateur
          if (sendCopyToAdmin) {
            try {
              // D'abord essayer de r√©cup√©rer depuis le document principal de l'admin
              final adminUserDoc = await FirebaseFirestore.instance
                  .collection('users')
                  .doc(adminId)
                  .get();
              
              // V√©rifier si l'email est dans le document principal
              adminEmail = adminUserDoc.data()?['email'];
              
              // Si l'email n'est pas trouv√©, essayer dans la sous-collection authentification
              if (adminEmail == null) {
                final adminAuthDoc = await FirebaseFirestore.instance
                    .collection('users')
                    .doc(adminId)
                    .collection('authentification')
                    .doc(adminId)
                    .get();
                
                adminEmail = adminAuthDoc.data()?['email'];
                print('üìß Email administrateur r√©cup√©r√© depuis authentification: $adminEmail');
              }
              
              // Si toujours null, essayer de r√©cup√©rer l'utilisateur Firebase
              if (adminEmail == null) {
                try {
                  // R√©cup√©rer tous les collaborateurs de l'admin pour trouver son email
                  final adminCollaborateursSnapshot = await FirebaseFirestore.instance
                      .collection('users')
                      .doc(adminId)
                      .collection('collaborateurs')
                      .where('role', isEqualTo: 'admin')
                      .limit(1)
                      .get();
                  
                  if (adminCollaborateursSnapshot.docs.isNotEmpty) {
                    adminEmail = adminCollaborateursSnapshot.docs.first.data()['email'];
                    print('üìß Email administrateur r√©cup√©r√© depuis collaborateurs: $adminEmail');
                  }
                } catch (e) {
                  print('‚ùå Erreur lors de la recherche dans collaborateurs: $e');
                }
              }
              
              print('üìß Email administrateur r√©cup√©r√©: $adminEmail');
            } catch (e) {
              print('‚ùå Erreur lors de la r√©cup√©ration de l\'email administrateur: $e');
            }
          }
        }
      } else {
        // Si c'est l'admin lui-m√™me, utiliser ses propres donn√©es
        if (sendCopyToAdmin) {
          adminEmail = userDoc.data()?['email'] ?? user.email;
          print('üìß Email administrateur (utilisateur actuel): $adminEmail');
          
          // Si toujours null, utiliser l'email de l'utilisateur Firebase
          if (adminEmail == null && user.email != null) {
            adminEmail = user.email;
            print('üìß Utilisation de l\'email Firebase comme fallback: $adminEmail');
          }
        }
        
        // R√©cup√©rer les donn√©es de l'entreprise
        nomEntreprise ??= userDoc.data()?['nomEntreprise'];
        adresse ??= userDoc.data()?['adresse'];
        telephone ??= userDoc.data()?['telephone'];
        logoUrl ??= userDoc.data()?['logoUrl'];
      }
    } catch (e) {
      print('‚ùå Erreur lors de la v√©rification du r√¥le: $e');
      // Tenter d'utiliser les donn√©es de l'utilisateur actuel comme fallback
      if (sendCopyToAdmin && user.email != null) {
        adminEmail = user.email;
        print('üìß Utilisation de l\'email Firebase comme fallback apr√®s erreur: $adminEmail');
      }
    }

    // R√©cup√©rer les param√®tres SMTP
    final adminDoc = await FirebaseFirestore.instance
        .collection('admin')
        .doc('smtpSettings')
        .get();

    if (!adminDoc.exists) {
      throw Exception('Configuration SMTP non trouv√©e');
    }

    final smtpData = adminDoc.data() as Map<String, dynamic>;
    final smtpEmail = smtpData['smtpEmail'] ?? '';
    final smtpPassword = smtpData['smtpPassword'] ?? '';
    final smtpServer = smtpData['smtpServer'] ?? '';
    final smtpPort = smtpData['smtpPort'] ?? 465;

    if (smtpEmail.isEmpty || smtpPassword.isEmpty || smtpServer.isEmpty) {
      throw Exception('Configuration SMTP incompl√®te');
    }

    // V√©rifier que le fichier PDF existe
    if (!File(pdfPath).existsSync()) {
      throw Exception('Le fichier PDF est introuvable');
    }

    final server = SmtpServer(
      smtpServer,
      port: smtpPort,
      username: smtpEmail,
      password: smtpPassword,
      ssl: true,
    );

    print('Tentative d\'envoi depuis $smtpEmail via $smtpServer:$smtpPort');
    final message = Message()
      ..from = Address(smtpEmail, nomEntreprise ?? 'Contraloc')
      ..recipients.add(email)
      ..subject = 'üöó Cl√¥ture de votre location $marque $modele $immatriculation'
      ..headers = {
        'Message-ID':
            '<${DateTime.now().millisecondsSinceEpoch}@contraloc.fr>',
        'X-Mailer': 'Contraloc Mailer',
        'Return-Path': '<$smtpEmail>',
        'List-Unsubscribe': '<mailto:$smtpEmail>',
        'Feedback-ID': 'contraloc:${DateTime.now().millisecondsSinceEpoch}'
      }
      ..html = '''
        <div style="font-family: Arial, sans-serif; font-size: 14px; color: #333; line-height: 1.6;">
          <div style="background-color: #08004D; color: white; padding: 20px; text-align: center; border-radius: 10px 10px 0 0;">
            <h1 style="margin: 0; font-size: 24px; color: #FFFFFF;">${nomEntreprise ?? "Contraloc"}</h1>
          </div>

          <div style="padding: 20px; background-color: #EFEFEF; border-radius: 0 0 10px 10px;">
            <p>Bonjour ${prenom ?? ''} ${nom ?? ''},</p>
            
            <p>Nous vous confirmons la restitution du v√©hicule que vous avez lou√© chez nous.</p>
            
            <p style="font-weight: bold;">Merci pour votre confiance et bonne route ! üèéÔ∏èüöó</p>
            
            <p style="font-weight: bold; color: #333;">
              <strong>‚ö†Ô∏è L'utilisateur est totalement responsable des contraventions, amendes et proc√®s-verbaux √©tablis en violation du code de la route.</strong>
            </p>
            
            <p>Si vous pensez avoir re√ßu cet email par erreur, merci de bien vouloir nous contacter au plus vite √† l'adresse suivante : contact@contraloc.fr.</p>

            <p>Nous vous remercions pour votre confiance et esp√©rons avoir le plaisir de vous accompagner √† nouveau tr√®s bient√¥t.</p>

            <br>
            <div style="display: flex; align-items: center;">
              ${logoUrl != null ? '<img src="$logoUrl" alt="Logo" style="width: 70px; height: auto; margin-right: 15px;" />' : ''}
              <div>
                <p style="margin: 0; font-weight: bold; font-size: 16px; color: #08004D;">${nomEntreprise ?? "Contraloc"}</p>
                ${adresse != null ? '<p style="margin: 0; color: #555;">Adresse: $adresse</p>' : ''}
                ${telephone != null ? '<p style="margin: 0; color: #555;">T√©l√©phone : $telephone</p>' : ''}
              </div>
            </div>
            <p style="text-align: center; font-size: 12px; color: #777; margin-top: 20px;">contraloc.fr</p>
          </div>
        </div>
      '''
      ..attachments.add(FileAttachment(File(pdfPath)));

    final sendReport = await send(message, server);
    print('Rapport d\'envoi : ${sendReport.toString()}');

    // Envoyer une copie √† l'administrateur et aux collaborateurs autoris√©s
    if (sendCopyToAdmin && adminEmail != null) {
      try {
        // R√©cup√©rer l'ID de l'administrateur
        String adminId = user.uid;
        
        // Si c'est un collaborateur, r√©cup√©rer l'ID de son admin
        final userDoc = await FirebaseFirestore.instance
            .collection('users')
            .doc(user.uid)
            .get();
            
        if (userDoc.exists && userDoc.data()?['role'] == 'collaborateur') {
          adminId = userDoc.data()?['adminId'] ?? user.uid;
        }
        
        // R√©cup√©rer email_secondaire depuis la sous-collection authentification
        String? emailSecondaire;
        try {
          final adminAuthDoc = await FirebaseFirestore.instance
              .collection('users')
              .doc(adminId)
              .collection('authentification')
              .doc(adminId)
              .get();
              
          if (adminAuthDoc.exists) {
            emailSecondaire = adminAuthDoc.data()?['email_secondaire'];
            if (emailSecondaire != null && emailSecondaire.isNotEmpty) {
              print('üìß Email secondaire administrateur r√©cup√©r√©: $emailSecondaire');
            }
          }
        } catch (e) {
          print('‚ùå Erreur lors de la r√©cup√©ration de l\'email secondaire: $e');
        }
        
        // R√©cup√©rer les collaborateurs qui ont receiveContractCopies = true
        List<String> collaborateursEmails = [];

        // V√©rifier si l'utilisateur actuel est un collaborateur
        bool isCollaborateur = user.uid != adminId;

        if (isCollaborateur) {
          // Si c'est un collaborateur, v√©rifier s'il doit recevoir des copies
          try {
            print('üìß V√©rification si le collaborateur actuel doit recevoir des copies');
            final collaborateurDoc = await FirebaseFirestore.instance
                .collection('users')
                .doc(adminId)
                .collection('collaborateurs')
                .doc(user.uid)
                .get();
            
            if (collaborateurDoc.exists && collaborateurDoc.data()?['receiveContractCopies'] == true) {
              final collaborateurEmail = collaborateurDoc.data()?['email'];
              if (collaborateurEmail != null && collaborateurEmail.isNotEmpty) {
                collaborateursEmails.add(collaborateurEmail);
                print('üìß Collaborateur actuel ajout√© en copie: $collaborateurEmail');
              }
            }
          } catch (e) {
            print('‚ùå Erreur lors de la v√©rification du collaborateur: $e');
          }
        } else {
          // Si c'est l'administrateur, il peut acc√©der √† tous les collaborateurs
          try {
            print('üìß R√©cup√©ration des collaborateurs en tant qu\'administrateur');
            final collaborateursSnapshot = await FirebaseFirestore.instance
                .collection('users')
                .doc(adminId)
                .collection('collaborateurs')
                .where('receiveContractCopies', isEqualTo: true)
                .get();
            
            for (var collaborateurDoc in collaborateursSnapshot.docs) {
              final collaborateurEmail = collaborateurDoc.data()['email'];
              if (collaborateurEmail != null && collaborateurEmail.isNotEmpty) {
                collaborateursEmails.add(collaborateurEmail);
                print('üìß Collaborateur ajout√© en copie: $collaborateurEmail');
              }
            }
          } catch (e) {
            print('‚ùå Erreur lors de la r√©cup√©ration des collaborateurs: $e');
          }
        }
        
        final adminMessage = Message()
          ..from = Address(smtpEmail, nomEntreprise ?? 'Contraloc')
          ..recipients.add(smtpEmail); // Utiliser l'adresse d'envoi comme destinataire technique

        // Ajouter l'administrateur en copie invisible (cci)
        adminMessage.bccRecipients.add(adminEmail);
        print('üìß Administrateur ajout√© en copie invisible: $adminEmail');
                    
        // Ajouter l'email secondaire en copie invisible (cci) si disponible
        if (emailSecondaire != null && emailSecondaire.isNotEmpty) {
          adminMessage.bccRecipients.add(emailSecondaire);
          print('üìß Email secondaire ajout√© en copie invisible: $emailSecondaire');
        }
        
        // Ajouter les collaborateurs en copie invisible (cci)
        for (var collaborateurEmail in collaborateursEmails) {
          adminMessage.bccRecipients.add(collaborateurEmail);
          print('üìß Collaborateur ajout√© en copie invisible: $collaborateurEmail');
        }
        
        adminMessage
          ..subject = '[COPIE] Cl√¥ture de location $marque $modele $immatriculation pour $prenom $nom'
          ..headers = {
            'Message-ID':
                '<${DateTime.now().millisecondsSinceEpoch + 1}@contraloc.fr>',
            'X-Mailer': 'Contraloc Mailer',
            'Return-Path': '<$smtpEmail>',
            'List-Unsubscribe': '<mailto:$smtpEmail>',
            'Feedback-ID': 'contraloc:${DateTime.now().millisecondsSinceEpoch + 1}'
          }
          ..html = '''
            <div style="font-family: Arial, sans-serif; font-size: 14px; color: #333; line-height: 1.6;">
              <div style="background-color: #08004D; color: white; padding: 20px; text-align: center; border-radius: 10px 10px 0 0;">
                <h1 style="margin: 0; font-size: 24px; color: #FFFFFF;">${nomEntreprise ?? "Contraloc"} - Copie de cl√¥ture</h1>
              </div>

              <div style="padding: 20px; background-color: #EFEFEF; border-radius: 0 0 10px 10px;">
                <p>Bonjour,</p>
                
                <p>Voici une copie de la cl√¥ture de location pour <strong>$prenom $nom</strong> concernant le v√©hicule <strong>$marque $modele $immatriculation</strong>.</p>
                
                <h3 style="color: #08004D; margin: 20px 0;">R√©capitulatif :</h3>
                <ul style="list-style-type: none; padding: 0;">
                  <li>‚Ä¢ Kilom√©trage final : <strong>$kilometrageRetour km</strong></li>
                  <li>‚Ä¢ Date de fin effective : <strong>$dateFinEffectif</strong></li>
                  <li>‚Ä¢ Commentaire : <strong>$commentaireRetour</strong></li>
                </ul>

                <p>Ce message est une copie automatique envoy√©e √† l'administrateur pour archivage.</p>

                <br>
                <div style="display: flex; align-items: center;">
                  ${logoUrl != null ? '<img src="$logoUrl" alt="Logo" style="width: 70px; height: auto; margin-right: 15px;" />' : ''}
                  <div>
                    <p style="margin: 0; font-weight: bold; font-size: 16px; color: #08004D;">${nomEntreprise ?? "Contraloc"}</p>
                    ${adresse != null ? '<p style="margin: 0; color: #555;">Adresse: $adresse</p>' : ''}
                    ${telephone != null ? '<p style="margin: 0; color: #555;">T√©l√©phone : $telephone</p>' : ''}
                  </div>
                </div>
                <p style="text-align: center; font-size: 12px; color: #777; margin-top: 20px;">contraloc.fr</p>
              </div>
            </div>
          '''
          ..attachments.add(FileAttachment(File(pdfPath)));

        await send(adminMessage, server);
        print('Copie de la cl√¥ture envoy√©e √† l\'administrateur: $adminEmail');
      } catch (e) {
        print('Erreur lors de l\'envoi de la copie √† l\'administrateur: $e');
      }
    }

    if (context.mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Email de cl√¥ture envoy√© avec succ√®s')),
      );
    }
  } catch (e) {
    print('Erreur lors de l\'envoi de l\'email de cl√¥ture: $e');
    if (context.mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Erreur lors de l\'envoi de l\'email: $e')),
      );
    }
  }
}
